package ua.snuk182.asia.services.mrim.inner;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpHead;
import org.apache.http.impl.client.DefaultHttpClient;

import ua.snuk182.asia.services.api.ProtocolUtils;
import ua.snuk182.asia.services.mrim.MrimEntityAdapter;
import ua.snuk182.asia.services.mrim.inner.dataentity.MrimBosString;
import ua.snuk182.asia.services.mrim.inner.dataentity.MrimBuddy;
import ua.snuk182.asia.services.mrim.inner.dataentity.MrimGroup;
import ua.snuk182.asia.services.mrim.inner.dataentity.MrimMessage;
import ua.snuk182.asia.services.mrim.inner.dataentity.MrimOnlineInfo;
import ua.snuk182.asia.services.mrim.inner.dataentity.MrimPacket;
import ua.snuk182.asia.services.utils.Base64;
import ua.snuk182.asia.services.utils.MD5;

public final class MrimProcessor {
	
	private Map<Long, MessageData> msgIDs = new HashMap<Long, MessageData>();

	private static final String ALIAS = "Asia IM";
	private static final String VERSION_INFO = "client=\"Asia IM\" title=\"Asia IM\" version=\"1.0\"";
	private static final String LANG = "ru";
	private static final String ICON_SERVER = "http://obraz.foto.mail.ru/%s/%s/_mrimavatar";
	
	private MrimServiceInternal service;

	public MrimProcessor(MrimServiceInternal service) {
		this.service = service;
	}

	public MrimPacket parsePacket(byte[] tail) throws MrimException {
		if (tail == null || tail.length < 4) {
			throw new MrimException("No packet data");
		}

		int start4bytes = ProtocolUtils.bytes2IntLE(tail, 0);

		if (start4bytes != MrimConstants.CS_MAGIC) {
			return parseBosString(tail);
		}

		if (tail.length < 44) {
			throw new MrimException("No packet data");
		}

		MrimPacket packet = new MrimPacket();

		// first 8 bytes are useless
		packet.seqNumber = ProtocolUtils.bytes2IntLE(tail, 8);
		packet.type = ProtocolUtils.bytes2IntLE(tail, 12);
		packet.rawData = tail;

		return packet;
	}

	public void parsePacketTail(MrimPacket packet) {
		// TODO remove
		service.log("packet " + packet.type);

		if (packet.type == MrimConstants.MRIM_CS_HELLO) {
			service.log("server hello");
			reconnectBos((MrimBosString) packet);
			return;
		}

		switch (packet.type) {
		case MrimConstants.MRIM_CS_HELLO_ACK:
			parsePingFreq(packet);
			proceedLogin();
			break;
		case MrimConstants.MRIM_CS_LOGIN_ACK:
			service.log("login ok");
			service.getServiceResponse().respond(MrimServiceResponse.RES_CONNECTING, 5);
			break;
		case MrimConstants.MRIM_CS_LOGIN_REJ:
			service.log("login failed");
			loginFailed(packet);
			break;
		case MrimConstants.MRIM_CS_LOGOUT:
			parseLogout(packet);
			break;
		case MrimConstants.MRIM_CS_CONTACT_LIST2:
			service.getServiceResponse().respond(MrimServiceResponse.RES_CONNECTING, 7);
			service.log("contact list");
			parseContacts(packet);
			
			
			/*String toParse = "ef be ad de 17 00 01 00 00 00 00 00 37 10 00 00 a9 24 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 05 00 00 00 02 00 00 00 75 73 14 00 00 00 75 75 73 73 75 75 73 73 73 73 75 73 75 75 75 73 73 73 73 73 02 02 00 00 12 00 00 00 1e 04 41 04 42 04 30 04 3b 04 4c 04 3d 04 4b 04 35 04 02 02 00 01 0c 00 00 00 14 04 40 04 43 04 37 04 4c 04 4f 04 02 02 00 02 0a 00 00 00 21 04 35 04 3c 04 4c 04 4f 04 02 02 00 03 0e 00 00 00 1a 04 3e 04 3b 04 3b 04 35 04 33 04 38 04 02 02 00 04 0a 00 00 00 1d 04 38 04 3a 04 42 04 3e 04 08 02 00 00 02 00 00 00 13 00 00 00 76 2e 65 2e 7a 61 68 61 72 6f 76 40 6d 61 69 6c 2e 72 75 1a 00 00 00 21 04 3b 04 30 04 32 04 30 04 20 00 17 04 30 04 45 04 30 04 40 04 3e 04 32 04 00 00 00 00 00 00 00 00 17 00 00 00 37 37 30 31 32 37 30 36 32 33 35 2c 37 37 37 37 34 30 33 32 32 36 32 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 02 00 00 01 00 00 00 16 00 00 00 65 63 6f 6e 6f 6d 5f 6d 6f 6c 79 6b 65 6e 40 6d 61 69 6c 2e 72 75 0a 00 00 00 20 04 35 04 3d 04 30 04 42 04 00 00 00 00 01 00 00 80 0b 00 00 00 37 37 30 31 37 34 38 35 34 35 31 08 00 00 00 73 74 61 74 75 73 5f 31 0c 00 00 00 1e 04 3d 04 3b 04 30 04 39 04 3d 04 00 00 00 00 ff ff ff ff 00 00 00 00 fb 8c 18 2d a4 1f 9d 2c 5d 68 f6 4c 44 00 00 00 45 00 6e 00 64 00 6c 00 65 00 73 00 73 00 20 00 75 00 6e 00 69 00 76 00 65 00 72 00 73 00 65 00 2c 00 20 00 75 00 6e 00 73 00 74 00 6f 00 70 00 61 00 62 00 6c 00 65 00 20 00 74 00 69 00 6d 00 65 00 2e 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 01 00 00 00 11 00 00 00 70 6f 64 72 75 67 2e 38 36 40 6d 61 69 6c 2e 72 75 1e 00 00 00 23 04 3b 04 4c 04 4f 04 3d 04 30 04 20 00 1c 04 30 04 3b 04 4b 04 33 04 38 04 3d 04 30 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 01 00 00 00 10 00 00 00 69 72 69 6e 61 64 5f 6d 40 6d 61 69 6c 2e 72 75 0c 00 00 00 18 04 40 04 38 04 48 04 3a 04 30 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 01 02 00 00 00 00 00 00 13 00 00 00 61 6e 6e 61 5f 32 37 30 33 39 30 40 6d 61 69 6c 2e 72 75 16 00 00 00 10 04 3d 04 3d 04 30 04 20 00 1a 04 3e 04 41 04 42 04 4e 04 3a 04 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 02 00 00 00 15 00 00 00 73 76 65 74 6c 69 73 68 69 6e 61 5f 6e 40 6d 61 69 6c 2e 72 75 20 00 00 00 1d 04 30 04 41 04 42 04 4f 04 20 00 21 04 32 04 35 04 42 04 3b 04 38 04 48 04 38 04 3d 04 30 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 01 02 00 00 00 00 00 00 16 00 00 00 65 6c 65 6e 61 5f 7a 61 78 61 70 6f 76 61 40 6d 61 69 6c 2e 72 75 1c 00 00 00 15 04 3b 04 35 04 3d 04 30 04 20 00 1a 04 3e 04 3f 04 4b 04 3b 04 3e 04 32 04 30 04 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 08 02 00 00 01 00 00 00 13 00 00 00 74 61 6e 79 61 31 33 35 2d 38 37 40 6d 61 69 6c 2e 72 75 0e 00 00 00 22 04 30 04 3d 04 4e 04 48 04 3a 04 30 04 00 00 00 00 04 00 00 00 0b 00 00 00 37 37 37 35 34 35 30 33 33 39 33 09 00 00 00 73 74 61 74 75 73 5f 32 32 20 00 00 00 23 04 41 04 38 04 3b 04 35 04 3d 04 3d 04 3e 04 20 00 40 04 30 04 31 04 3e 04 42 04 30 04 4e 04 00 00 00 00 ff 03 00 00 2a 00 00 00 63 6c 69 65 6e 74 3d 22 6d 61 67 65 6e 74 22 20 76 65 72 73 69 6f 6e 3d 22 35 2e 38 22 20 62 75 69 6c 64 3d 22 34 36 36 34 22 42 2f c2 6c 49 bd 6c 1c 9d d8 66 4e d8 00 00 00 34 00 39 00 25 00 20 00 3d 04 35 04 41 04 47 04 30 04 41 04 42 04 3d 04 4b 04 45 04 20 00 41 04 3b 04 43 04 47 04 30 04 35 04 32 04 20 00 3f 04 40 04 3e 04 38 04 41 04 45 04 3e 04 34 04 38 04 42 04 20 00 3f 04 3e 04 41 04 3b 04 35 04 20 00 41 04 3b 04 3e 04 32 04 3a 00 20 00 22 00 41 04 3c 04 3e 04 42 04 40 04 38 04 20 00 3a 04 30 04 3a 04 20 00 4f 04 20 00 3c 04 3e 04 33 04 43 04 22 00 20 00 3e 04 41 04 42 04 30 04 3b 04 4c 04 3d 04 4b 04 35 04 20 00 35 00 31 00 25 00 20 00 3a 00 20 00 22 00 45 04 35 04 40 04 3d 04 4f 04 2e 00 2e 00 2e 00 20 00 41 04 3c 04 3e 04 42 04 40 04 38 04 20 00 3a 04 30 04 3a 04 20 00 3d 04 30 04 34 04 3e 04 22 00 00 00 00 00 00 00 00 00 a4 00 00 00 01 00 00 00 9c 00 00 00 09 00 00 00 67 65 6f 2d 70 6f 69 6e 74 8b 00 00 00 07 00 00 00 35 35 2e 30 32 33 37 07 00 00 00 38 32 2e 39 34 36 34 09 00 00 00 4d 41 50 4f 42 4a 45 43 54 4a 00 00 00 1d 04 3e 04 32 04 3e 04 41 04 38 04 31 04 38 04 40 04 41 04 3a 04 30 04 4f 04 20 00 3e 04 31 04 3b 04 30 04 41 04 42 04 4c 04 2c 00 20 00 33 04 2e 00 20 00 1d 04 3e 04 32 04 3e 04 41 04 38 04 31 04 38 04 40 04 41 04 3a 04 00 00 00 00 00 00 00 00 08 00 00 00 33 30 30 39 39 36 32 32 02 00 00 00 32 31 00 00 00 00 00 02 00 00 01 00 00 00 11 00 00 00 73 74 75 73 68 61 5f 61 7a 40 6d 61 69 6c 2e 72 75 20 00 00 00 10 04 3d 04 30 04 41 04 42 04 30 04 41 04 38 04 4f 04 20 00 16 04 30 04 40 04 3e 04 32 04 30 04 00 00 00 00 01 00 00 00 00 00 00 00 08 00 00 00 73 74 61 74 75 73 5f 31 0c 00 00 00 1e 04 3d 04 3b 04 30 04 39 04 3d 04 00 00 00 00 16 00 00 00 20 00 00 00 63 6c 69 65 6e 74 3d 22 6a 61 67 65 6e 74 22 20 76 65 72 73 69 6f 6e 3d 22 33 2e 39 2e 31 35 22 12 33 ac 54 35 4d 3d 76 1e 44 53 4e a6 00 00 00 1f 04 40 04 38 04 4f 04 42 04 3d 04 3e 04 20 00 32 04 41 04 3f 04 3e 04 3c 04 38 04 3d 04 30 04 42 04 4c 04 20 00 3c 04 3e 04 3c 04 35 04 3d 04 42 04 4b 04 20 00 38 04 37 04 20 00 3f 04 40 04 3e 04 48 04 3b 04 3e 04 33 04 3e 04 20 00 41 04 20 00 42 04 35 04 3c 04 20 00 47 04 35 04 3b 04 3e 04 32 04 35 04 3a 04 3e 04 3c 04 2c 00 20 00 3a 04 3e 04 42 04 3e 04 40 04 4b 04 39 04 20 00 34 04 3e 04 20 00 41 04 38 04 45 04 20 00 3f 04 3e 04 40 04 20 00 40 04 4f 04 34 04 3e 04 3c 04 2e 00 2e 00 2e 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 02 00 00 00 14 00 00 00 6b 73 65 6e 69 6a 61 2d 39 36 31 35 40 6d 61 69 6c 2e 72 75 20 00 00 00 1a 04 41 04 35 04 3d 04 4f 04 20 00 11 04 3e 04 40 04 3e 04 34 04 43 04 3b 04 38 04 3d 04 30 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 01 00 00 00 16 00 00 00 72 65 67 69 6e 75 73 68 6b 61 32 30 30 39 40 6d 61 69 6c 2e 72 75 18 00 00 00 20 04 35 04 33 04 38 04 3d 04 30 04 20 00 11 04 35 04 3b 04 30 04 48 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 01 02 00 00 00 00 00 00 15 00 00 00 66 6f 72 6f 73 74 6f 76 61 5f 6d 61 72 40 6d 61 69 6c 2e 72 75 20 00 00 00 1c 04 30 04 40 04 38 04 3d 04 30 04 20 00 24 04 3e 04 40 04 3e 04 41 04 42 04 3e 04 32 04 30 04 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 01 02 00 00 00 00 00 00 18 00 00 00 65 6c 65 6e 61 5f 62 6f 72 6f 64 79 6c 69 6e 61 40 6d 61 69 6c 2e 72 75 20 00 00 00 15 04 3b 04 35 04 3d 04 30 04 20 00 11 04 3e 04 40 04 3e 04 34 04 43 04 3b 04 38 04 3d 04 30 04 00 00 00 00 01 00 00 00 0a 00 00 00 37 39 35 32 39 30 37 37 30 39 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 02 00 00 00 11 00 00 00 76 69 70 61 6e 6e 67 65 6c 40 6d 61 69 6c 2e 72 75 1a 00 00 00 10 04 3d 04 4e 04 42 04 3a 04 30 04 20 00 28 04 43 04 3b 04 4c 04 33 04 30 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 09 02 00 00 01 00 00 00 1d 00 00 00 65 6b 61 74 65 72 69 6e 61 5f 67 61 76 72 69 6c 6f 76 61 38 33 40 6d 61 69 6c 2e 72 75 26 00 00 00 15 04 3a 04 30 04 42 04 35 04 40 04 38 04 3d 04 30 04 20 00 13 04 30 04 32 04 40 04 38 04 3b 04 3e 04 32 04 30 04 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 03 00 00 00 16 00 00 00 6d 61 6b 73 69 6d 5f 6b 72 61 76 63 6f 76 40 6d 61 69 6c 2e 72 75 0c 00 00 00 14 04 3e 04 3a 04 42 04 3e 04 40 04 00 00 00 00 04 00 00 00 00 00 00 00 09 00 00 00 73 74 61 74 75 73 5f 33 33 06 00 00 00 21 00 21 00 21 00 00 00 00 00 36 00 00 00 45 00 00 00 63 6c 69 65 6e 74 3d 22 4d 79 4d 65 73 73 65 6e 67 65 72 22 20 76 65 72 73 69 6f 6e 3d 22 30 2e 30 2e 31 20 72 63 22 20 62 75 69 6c 64 3d 22 32 22 20 74 69 74 6c 65 3d 22 4d 79 4d 65 73 73 65 6e 67 65 72 22 00 00 00 00 00 00 00 00 a3 10 7a 4d
			MrimPacket p = new MrimPacket();
			p.rawData = MrimEntityAdapter.spacedHexString2Bytes(toParse);
			parseContacts(p);*/
			
			break;
		case MrimConstants.MRIM_CS_MESSAGE_ACK:
			parseMessage(packet);
			break;
		case MrimConstants.MRIM_CS_MESSAGE_STATUS:
			parseMessageAck(packet);
			break;
		case MrimConstants.MRIM_CS_USER_STATUS:
			parseUserStatus(packet);
			break;
		case MrimConstants.MRIM_CS_CONNECTION_PARAMS:
			parsePingFreq(packet);
			break;
		case MrimConstants.MRIM_CS_NEW_EMAIL:
			parseNewEmail(packet);
			break;
		case MrimConstants.MRIM_CS_MAILBOX_STATUS:
			parseMailboxStatus(packet);
			break;
		case MrimConstants.MRIM_CS_OFFLINE_MESSAGE_ACK:
			parseOfflineMessage(packet);
			break;
		case MrimConstants.MRIM_CS_USER_INFO:
			service.log("my own info");
			break;
		case 0x1079:
			service.log("some 1079 received");
			break;
		}
		return;
	}

	private void parseOfflineMessage(MrimPacket packet) {
		int pos = 44;
		
		byte[] idBytes = new byte[4];
		System.arraycopy(packet.rawData, pos, idBytes, 0, 4);
		
		int id = ProtocolUtils.bytes2IntLE(idBytes);
		pos+=4;
		try {
			String email = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
			
			String date = getMailValue(email, "Date");
			String from = getMailValue(email, "From");
			String msg = getMailMessage(email);
			long flags = 0;
			try {
			    flags = Integer.parseInt(getMailValue(email, "X-MRIM-Flags"), 16);
			} catch (Exception e) {
			}
			
			service.log("offline "+from+"/"+date+"/"+msg+"/"+flags);
			
			final MrimMessage message = new MrimMessage();
			message.text = msg+" \r\n"+date;
			message.from = from;
			message.messageId = id;
			
			new Thread(){
				@Override
				public void run(){
					service.getServiceResponse().respond(MrimServiceResponse.RES_MESSAGE, message);
				}
			}.start();
			
			//sendDeleteOfflineMsgRequest(idBytes);
			
			/*if ((service.getOnlineInfo().status & MrimConstants.STATUS_FLAG_INVISIBLE) == 0 && (flags & MrimConstants.MESSAGE_FLAG_NORECV) == 0){
				sendMsgAck(from, id);
			}*/
		} catch (Exception e) {
			service.log(e);
		}
	}
	
	@SuppressWarnings("unused")
	private void sendDeleteOfflineMsgRequest(byte[] idBytes) {
		MrimPacket packet = new MrimPacket();
		packet.type = MrimConstants.MRIM_CS_DELETE_OFFLINE_MESSAGE;
		packet.rawData = idBytes;

		service.getRunnableService().sendToSocket(packet);
	}

	private String getMailValue(String header, String key) {
        int pos = header.toLowerCase().indexOf(key.toLowerCase());
        if (-1 == pos) {
            return "";
        }
        int end = header.indexOf('\n', pos);
        return header.substring(pos + key.length() + 1, end).trim();
    }
    private String getMailMessage(String mail) {
    	String body = "";
        if (-1 != getMailValue(mail, "Content-Type").indexOf("multipart/")) {
            String boundary = getMailValue(mail, "Boundary");
            int start = mail.indexOf("--" + boundary) + 2 + boundary.length();
            int end = mail.indexOf("--" + boundary, start)-1;
            body = getMailBody(mail.substring(start, end));
        }

        if (-1 != getMailValue(mail, "Content-Transfer-Encoding").indexOf("base64")) {
            byte[] data;
			try {
				data = Base64.decode(body);
				body = ProtocolUtils.getEncodedString(data, "UTF-16LE");
			} catch (IOException e) {
				service.log(e);
			}            
        }
        return body;
    }

	private String getMailBody(String string) {
		if (string.indexOf("\n\n")>-1){
			return string.split("\n\n")[1];
		} else {
			return string.split("\r\n\r\n")[1];
		}		
	}

	private void parseMailboxStatus(MrimPacket packet) {
		int pos = 44;
		
		long emailCount = MrimEntityAdapter.ul2Long(packet.rawData, pos);
		pos+=4;
		StringBuilder sb = new StringBuilder();
		sb.append(emailCount);
		sb.append(" emails");
		
		service.getServiceResponse().respond(MrimServiceResponse.RES_NOTIFICATION, sb.toString(), true);
	}

	private void parseNewEmail(MrimPacket packet) {
		int pos = 44;
		
		long emailCount = MrimEntityAdapter.ul2Long(packet.rawData, pos);
		pos+=4;
		String sender = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos+=(4+MrimEntityAdapter.ul2Long(packet.rawData, pos));
		String topic = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		
		StringBuilder sb = new StringBuilder();
		sb.append(emailCount);
		sb.append(" emails\n\n");
		sb.append(sender);
		sb.append("\n");
		sb.append(topic);
		service.getServiceResponse().respond(MrimServiceResponse.RES_NOTIFICATION, sb.toString(), true);
	}

	private void parseLogout(MrimPacket packet) {
		int pos = 44;
		int status = ProtocolUtils.bytes2IntLE(packet.rawData, pos);
		pos+=4;
		if ((status & MrimConstants.LOGOUT_NO_RELOGIN_FLAG)!=0){
			service.lastConnectionError = "multiple login";
		} else {
			service.lastConnectionError = "server disconnected - "+status;
		} 		
		service.getRunnableService().disconnect();
	}

	private void parseUserStatus(MrimPacket packet) {
		int pos = 44;
		int status = ProtocolUtils.bytes2IntLE(packet.rawData, pos);
		pos+=4;
		String statusName = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos+=4+statusName.length();
		
		String xstatusname = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
		pos+=4+(xstatusname.length()*2);
		String xstatustext = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
		pos+=4+(xstatustext.length()*2);
		
		String email = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos+=4+email.length();
		
		MrimOnlineInfo info = new MrimOnlineInfo();
		info.status = status;
		info.uin = email;
		info.xstatusId = statusName;
		info.xstatusName = xstatusname;
		info.xstatusText = xstatustext;
		
		service.log("uid "+email+" status "+status+" / "+statusName+" / "+xstatusname+" / "+xstatustext);
		
		service.getServiceResponse().respond(MrimServiceResponse.RES_BUDDYSTATECHANGED, info);
	}

	private void parseMessageAck(MrimPacket packet) {
		int pos = 44;
		
		int status = ProtocolUtils.bytes2IntLE(packet.rawData, pos);
		
		MessageData data = msgIDs.remove(packet.seqNumber);
		if (data != null){
			if (status == MrimConstants.MESSAGE_DELIVERED){
				service.getServiceResponse().respond(MrimServiceResponse.RES_MESSAGEACK, data.email, (long)data.id, 2);
			} else {
				service.getServiceResponse().respond(MrimServiceResponse.RES_MESSAGEACK, data.email, (long)data.id, 1);
			}			
		}
	}

	@SuppressWarnings("unused")
	private void parseMessage(MrimPacket packet) {
		int pos = 44;
		
		int msgId = ProtocolUtils.bytes2IntLE(packet.rawData, pos);
		pos+=4;
		int flags = ProtocolUtils.bytes2IntLE(packet.rawData, pos);
		pos+=4;
		String from = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos+=4+from.length();
		
		if (((MrimConstants.MESSAGE_FLAG_NOTIFY & flags) != 0)){
			service.getServiceResponse().respond(MrimServiceResponse.RES_TYPING, from);
			return;
		}
		
		String text = null;
		if (((MrimConstants.MESSAGE_FLAG_OLD & flags) != 0) || ((MrimConstants.MESSAGE_FLAG_AUTHORIZE & flags) != 0)){
			text = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
			pos+=4+text.length();
		} else {
			text = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
			pos+=4+(text.length()*2);
		}
		
		String rtfText = null;
		
		if (((MrimConstants.MESSAGE_FLAG_OLD & flags) != 0) || ((MrimConstants.MESSAGE_FLAG_AUTHORIZE & flags) != 0)){
			rtfText = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
			pos+=4+text.length();
		} else {
			rtfText = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
			pos+=4+(text.length()*2);
		}
		
		String from2 = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos+=4+from2.length();
		int seq = ProtocolUtils.bytes2IntLE(packet.rawData, pos);
		pos+=4;
		service.log("message from "+from+" - "+text);
		
		MrimMessage message = new MrimMessage();
		message.text = text;
		message.from = from;
		message.messageId = msgId;
		
		service.getServiceResponse().respond(MrimServiceResponse.RES_MESSAGE, message);
		
		if ((service.getOnlineInfo().status & MrimConstants.STATUS_FLAG_INVISIBLE) == 0 && (flags & MrimConstants.MESSAGE_FLAG_NORECV) == 0){
			sendMsgAck(from, msgId);
		}
	}

	private void sendMsgAck(String to, int msgId) {
		MrimPacket packet = new MrimPacket();
		packet.type = MrimConstants.MRIM_CS_MESSAGE_RECV;
		byte[] toBytes = MrimEntityAdapter.string2lpsa(to);
		byte[] msgIdBytes = ProtocolUtils.int2ByteLE(msgId);
		
		packet.rawData = new byte[toBytes.length+msgIdBytes.length];
		System.arraycopy(toBytes, 0, packet.rawData, 0, toBytes.length);
		System.arraycopy(msgIdBytes, 0, packet.rawData, toBytes.length, 4);
		
		service.getRunnableService().sendToSocket(packet);
	}

	private void parseContacts(MrimPacket packet) {
		int pos = 44;
		
		List<MrimGroup> groups = new ArrayList<MrimGroup>();
		List<MrimBuddy> buddies = new ArrayList<MrimBuddy>();
		
		int responseCode = (int) MrimEntityAdapter.ul2Long(packet.rawData, pos);
		pos += 4;
		if (responseCode != MrimConstants.GET_CONTACTS_OK){
			return;
		}
		
		int groupCount = (int) MrimEntityAdapter.ul2Long(packet.rawData, pos);
		pos += 4;
		
		String groupMask = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos += (4 + groupMask.length());
		String contactMask = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
		pos += (4 + contactMask.length());
		
		service.log("group mask " + groupMask);
		service.log("contact mask " + contactMask);
		
		for (int i = 0; i< groupCount; i++){
			int flags = (int) MrimEntityAdapter.ul2Long(packet.rawData, pos);
			pos += 4;
			
			String name = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
			pos += (4 + name.length()*2);
			service.log("group name " + name+", group flags " + flags);
			pos += MrimEntityAdapter.skipFormatted(packet.rawData, groupMask, pos, 2);
			
			if ((flags & MrimConstants.CONTACT_FLAG_REMOVED) != 0){
				continue;
			}
			
			MrimGroup group = new MrimGroup();
			group.groupId = i;
			group.name = name;
			group.flags = flags;
			
			//TODO use more flags
			groups.add(group);
		}
		
		int i = 0;
		while(pos < packet.rawData.length){
			service.log("----- buddy -----");
			int flags = (int)MrimEntityAdapter.ul2Long(packet.rawData, pos);
			service.log("buddy flags " + flags);
			pos+=4;
			
            int groupId = (int)MrimEntityAdapter.ul2Long(packet.rawData, pos);
            service.log("buddy group " + groupId);
            pos+=4;
            
            String uin = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));            
            service.log("buddy uin " + uin);
            
            String name = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));
            service.log("buddy name " + name);
            
            int serverFlags = (int)MrimEntityAdapter.ul2Long(packet.rawData, pos);
            service.log("buddy server flags " + serverFlags);
            pos+=4;
            
            int status = (int)MrimEntityAdapter.ul2Long(packet.rawData, pos);
            service.log("buddy status " + status);
            pos+=4;
            
            String phone = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));
            service.log("buddy phone " + phone);
            
            String statusText = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));
            service.log("buddy xstatus id " + statusText);
            
            String xStatusTitle = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));
            service.log("buddy xstatus title " + xStatusTitle);
            
            String xStatusText = MrimEntityAdapter.lpsw2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));
            service.log("buddy xstatus text " + xStatusText);
            
            long unknown = MrimEntityAdapter.ul2Long(packet.rawData, pos);
            service.log("buddy unk " + unknown);
            pos+=4;
            
            String client = MrimEntityAdapter.lpsa2String(packet.rawData, pos);
            pos += (4 + MrimEntityAdapter.ul2Long(packet.rawData, pos));
            service.log("buddy uin " + uin + ", buddy name "+name);
            
            pos += MrimEntityAdapter.skipFormatted(packet.rawData, contactMask, pos, 12);
            
            if ((flags & MrimConstants.CONTACT_FLAG_REMOVED) != 0){
            	continue;
			}
            
            MrimBuddy buddy = new MrimBuddy();
            buddy.id = i;
            buddy.uin = uin;
            buddy.groupId = groupId;
            buddy.onlineInfo.xstatusName = xStatusTitle;
            buddy.onlineInfo.xstatusText = xStatusText;
            buddy.onlineInfo.status = status;
            buddy.onlineInfo.xstatusId = statusText;
            buddy.serverFlags = serverFlags;
            buddy.flags = flags;
            buddy.clientId = client;
            buddy.name = name;
            
            buddies.add(buddy);
            
            i++;
        }
		service.getServiceResponse().respond(MrimServiceResponse.RES_CONNECTING, 9);
		service.getServiceResponse().respond(MrimServiceResponse.RES_CLUPDATED, buddies, groups);
		service.setCurrentState(MrimServiceInternal.STATE_CONNECTED);
		service.startKeepalive();
		service.getServiceResponse().respond(MrimServiceResponse.RES_CONNECTED);
		getIcon(service.getMrid());
	}

	private void parsePingFreq(MrimPacket packet) {
		long pingFreq = MrimEntityAdapter.ul2Long(packet.rawData, 44);
		service.setPingFrequency(pingFreq);
	}

	private void loginFailed(MrimPacket packet) {
		service.lastConnectionError = MrimEntityAdapter.lpsa2String(packet.rawData, 44);
		service.getRunnableService().disconnect();
	}

	private void reconnectBos(MrimBosString bos) {
		service.setCurrentState(MrimServiceInternal.STATE_CONNECTING_BOS);
		service.log("reconnect to " + bos.bosAddress + ":" + bos.bosPort);
		service.getRunnableService().disconnect();

		service.getServiceResponse().respond(MrimServiceResponse.RES_CONNECTING, 3);
		service.setCurrentState(MrimServiceInternal.STATE_AUTHENTICATING);
		service.runService(bos.bosAddress, bos.bosPort);
	}

	private void proceedLogin() {
		service.log("logging in");
		MrimPacket packet = new MrimPacket();

		MD5 hash = new MD5();
		hash.init();
		hash.updateASCII(service.getPw());
		hash.finish();

		byte[] md5pass = hash.getDigestBits();
		packet.type = MrimConstants.MRIM_CS_LOGIN2;
		byte[] mrid = MrimEntityAdapter.string2lpsa(service.getMrid());
		//byte[] pw = MrimEntityAdapter.string2lpsa(service.getPw());
		byte[] alias = MrimEntityAdapter.string2lpsa(ALIAS);
		byte[] verInfo = MrimEntityAdapter.string2lpsa(VERSION_INFO);
		byte[] lang = MrimEntityAdapter.string2lpsa(LANG);
		byte[] statusDataBlob = getStatusSetByteBlob(service.getOnlineInfo().status, service.getOnlineInfo().xstatusId, service.getOnlineInfo().xstatusName, service.getOnlineInfo().xstatusText);
		byte[] raw = new byte[12 + mrid.length + md5pass.length + statusDataBlob.length + verInfo.length + lang.length + alias.length];

		Arrays.fill(raw, (byte) 0);
		int pos = 0;

		System.arraycopy(mrid, 0, raw, pos, mrid.length);
		pos += mrid.length;
		System.arraycopy(ProtocolUtils.int2ByteLE(md5pass.length), 0, raw, pos, 4);
		pos += 4;
		System.arraycopy(md5pass, 0, raw, pos, md5pass.length);
		pos += md5pass.length;
		
		/*System.arraycopy(ProtocolUtils.int2ByteLE(service.getCurrentStatus()), 0, raw, pos, 4);
		pos += 4;
		System.arraycopy(txtStatus, 0, raw, pos, txtStatus.length);
		pos += txtStatus.length;
		System.arraycopy(xstatusName, 0, raw, pos, xstatusName.length);
		pos += xstatusName.length;
		System.arraycopy(xstatusText, 0, raw, pos, xstatusText.length);
		pos += xstatusText.length;
		System.arraycopy(ProtocolUtils.int2ByteLE(0x12), 0, raw, pos, 4);
		pos += 4;*/
		
		System.arraycopy(statusDataBlob, 0, raw, pos, statusDataBlob.length);
		pos+=statusDataBlob.length;
		
		System.arraycopy(verInfo, 0, raw, pos, verInfo.length);
		pos += verInfo.length;
		System.arraycopy(lang, 0, raw, pos, lang.length);
		pos += lang.length;
		//skip two integers = 0
		pos += 8;
		
		System.arraycopy(alias, 0, raw, pos, alias.length);
		pos += alias.length;

		packet.rawData = raw;

		service.getRunnableService().sendToSocket(packet);
	}

	private MrimPacket parseBosString(byte[] tail) throws MrimException {
		MrimBosString bos = new MrimBosString();

		String fullBos = new String(tail);

		if (fullBos.length() < 1) {
			throw new MrimException("Corrupted BOS address");
		}

		if (fullBos.indexOf(":") > -1) {
			String[] boss = fullBos.split(":");
			bos.bosAddress = boss[0];
			bos.bosPort = Integer.parseInt(boss[1]);
		} else {
			bos.bosAddress = fullBos;
		}
		bos.type = MrimConstants.MRIM_CS_HELLO;

		return bos;
	}

	public byte[] packet2Bytes(MrimPacket packet) throws MrimException {

		if (packet == null || packet.type == -1) {
			throw new MrimException("Nothing to convert");
		}

		if (packet.rawData == null) {
			packet.rawData = new byte[0];
		}

		byte[] out = new byte[44 + packet.rawData.length];
		Arrays.fill(out, (byte) 0);
		System.arraycopy(ProtocolUtils.int2ByteLE(MrimConstants.CS_MAGIC), 0, out, 0, 4);
		System.arraycopy(ProtocolUtils.int2ByteLE(MrimConstants.PROTO_VERSION), 0, out, 4, 4);
		System.arraycopy(ProtocolUtils.int2ByteLE((int) packet.seqNumber), 0, out, 8, 4);
		System.arraycopy(ProtocolUtils.int2ByteLE((int) packet.type), 0, out, 12, 4);
		System.arraycopy(ProtocolUtils.int2ByteLE(packet.rawData.length), 0, out, 16, 4);

		// here IP data may be added
		System.arraycopy(packet.rawData, 0, out, 44, packet.rawData.length);
		return out;
	}

	public byte[] packets2Bytes(MrimPacket[] packets) throws MrimException {
		if (packets == null) {
			throw new MrimException("Error - packets is null");
		}

		if (packets.length == 1) {
			return packet2Bytes(packets[0]);
		}

		int length = 0;
		List<byte[]> bytes = new ArrayList<byte[]>();
		for (int i = 0; i < packets.length; i++) {
			if (packets[i] == null) {
				continue;
			}
			byte[] out = packet2Bytes(packets[i]);
			length += out.length;
			bytes.add(out);
		}

		byte[] out = new byte[length];
		int pos = 0;
		for (int i = 0; i < bytes.size(); i++) {
			System.arraycopy(bytes.get(i), 0, out, pos, bytes.get(i).length);
			pos += bytes.get(i).length;
		}

		return out;
	}

	public void sendHello() {
		MrimPacket packet = new MrimPacket();
		packet.type = MrimConstants.MRIM_CS_HELLO;
		packet.rawData = new byte[0];

		service.getRunnableService().sendToSocket(packet);
	}

	public void sendKeepalive() {
		MrimPacket packet = new MrimPacket();
		packet.type = MrimConstants.MRIM_CS_PING;
		packet.rawData = new byte[0];

		service.getRunnableService().sendToSocket(packet);
	}

	public void sendMessage(MrimMessage message) {
		MrimPacket packet = new MrimPacket();
		packet.type = MrimConstants.MRIM_CS_MESSAGE;
		
		byte[] toBytes = MrimEntityAdapter.string2lpsa(message.to);
		byte[] textBytes = MrimEntityAdapter.string2lpsw(message.text);
		byte[] rtfBytes = MrimEntityAdapter.string2lpsa("");
		
		byte[] data = new byte[toBytes.length+textBytes.length+rtfBytes.length+4];
		int pos = 0;
		System.arraycopy(ProtocolUtils.int2ByteLE(message.flags), 0, data, pos, 4);
		pos+=4;
		System.arraycopy(toBytes, 0, data, pos, toBytes.length);
		pos+=toBytes.length;
		System.arraycopy(textBytes, 0, data, pos, textBytes.length);
		pos+=textBytes.length;
		System.arraycopy(rtfBytes, 0, data, pos, rtfBytes.length);
		pos+=rtfBytes.length;
		
		packet.rawData = data;
		
		long messageId = service.getRunnableService().sendToSocket(packet);
		MessageData mdata = new MessageData();
		mdata.email = message.to;
		mdata.id = message.messageId;
		msgIDs.put(messageId, mdata);
	}
	
	public void getIcon(final String email) {
		new Thread(){
			@Override
			public void run(){
				String[] items = email.split("@");
				String[] domains = items[1].split("\\.");
				String url = String.format(ICON_SERVER, domains[0], items[0]);
				try {
					HttpClient hc = new DefaultHttpClient();
					HttpHead head = new HttpHead(url);
				
					HttpResponse response = hc.execute(head);
					if (response.getStatusLine().getStatusCode() == HttpStatus.SC_NOT_FOUND){
						return;
					}
					HttpGet get = new HttpGet(url);
					response = hc.execute(get);
					ByteArrayOutputStream bos = new ByteArrayOutputStream();
					//int len = (int) response.getEntity().getContentLength();
					//if (len > 0){
						byte[] bytes = new byte[1024];
						int read = 0;
						InputStream content = response.getEntity().getContent();
						while (read > -1){
							read = content.read(bytes, 0, 1024);
							if (read > 0){
								bos.write(bytes, 0, read);
							}
						};
					//}					
					
					service.getServiceResponse().respond(MrimServiceResponse.RES_SAVEIMAGEFILE, bos.toByteArray(), email, new String(email.hashCode()+""));
				} catch (Exception e) {
					service.log(url+"\n");
					service.log(e);
				}
			}
		}.start();
	}

	private class MessageData implements Serializable {
		
		/**
		 * 
		 */
		private static final long serialVersionUID = -5512618917441817714L;

		public int id = 0;
		private String email;
		
	}

	public void setStatus(MrimOnlineInfo info) {
		MrimPacket packet = new MrimPacket();
		packet.type = MrimConstants.MRIM_CS_CHANGE_STATUS;
		
		packet.rawData = getStatusSetByteBlob(info.status, info.xstatusId, info.xstatusName, info.xstatusText);
		
		service.getRunnableService().sendToSocket(packet);
	}
	
	public byte[] getStatusSetByteBlob(int status, String xstatusName, String xstatusTitle, String xstatusText){
		byte[] xstNameBytes = MrimEntityAdapter.string2lpsa(xstatusName);
		byte[] xstTitleBytes = MrimEntityAdapter.string2lpsw(xstatusTitle);
		byte[] xstTextBytes = MrimEntityAdapter.string2lpsw(xstatusText);
		
		byte[] bytes = new byte[8+xstNameBytes.length+xstTextBytes.length+xstTitleBytes.length];
		int pos=0;
		System.arraycopy(ProtocolUtils.int2ByteLE(status), 0, bytes, pos, 4);
		pos+=4;
		
		System.arraycopy(xstNameBytes, 0, bytes, pos, xstNameBytes.length);
		pos+=xstNameBytes.length;
		System.arraycopy(xstTitleBytes, 0, bytes, pos, xstTitleBytes.length);
		pos+=xstTitleBytes.length;
		System.arraycopy(xstTextBytes, 0, bytes, pos, xstTextBytes.length);
		pos+=xstTextBytes.length;
		
		System.arraycopy(ProtocolUtils.int2ByteLE(0x12), 0, bytes, pos, 4);
		pos += 4;
		
		return bytes;
	}

	public void sendTyping(String uid) {
		MrimMessage message = new MrimMessage();
		message.to = uid;
		message.text = " ";
		message.flags = MrimConstants.MESSAGE_FLAG_NOTIFY;
		//lazy filling in;
		message.messageId = VERSION_INFO.hashCode();
		
		sendMessage(message);
	}

}
